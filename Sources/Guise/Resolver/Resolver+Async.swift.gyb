//
//  Resolver+Async.swift
//  Guise
//
//  Created by Gregory Higley on 2022-09-21.
//
%{
arg_count = int(arg_count)

def args(items, fmt=lambda i: f'{i}', sep=', '):
  return sep.join(map(fmt, items))
}%

extension Resolver {
  /**
   A helper method for resolving an `Entry`.
   
   Never call `Entry::resolve` directly. Instead, use
   this method, which handles error propagation.
   */
  func resolve<T, A>(
    entry: Entry,
    args arg1: A,
    forKey key: Key
  ) async throws -> T {
    do {
      return try await entry.resolve(self, arg1) as! T
    } catch let reason as ResolutionError.Reason {
      throw ResolutionError(key: key, reason: reason)
    } catch let error as ResolutionError {
      if error.key == key {
        throw error
      } else {
        throw ResolutionError(key: key, reason: .error(error))
      }
    } catch {
      throw ResolutionError(key: key, reason: .error(error))
    }
  }
}

public extension Resolver {
  /**
   The root resolution method. All roads lead here.
   
   Although this method is public, its overloads are
   much more convenient to use.
   */
  func resolve<T, A>(
    _ type: T.Type,
    tags: Set<AnyHashable>,
    args arg1: A
  ) async throws -> T {
    switch type {
    case let type as LazyResolving.Type:
      return type.init(self, tags: tags, args: arg1) as! T
    default:
      let key = Key(type, tags: tags, args: A.self)
      do {
        let entry = try resolve(key: key)
        return try await resolve(entry: entry, args: arg1, forKey: key)
      } catch let error as ResolutionError {
        guard
          error.key == key,
          case .notFound = error.reason
        else {
          throw error
        }
        switch type {
        case let type as ResolutionAdapter.Type:
          return try await type.resolveAsync(tags: tags, args: arg1, with: self) as! T
        default:
          throw error
        }
      }
    }
  }

#if swift(>=5.9)

  func resolve<T, A1, each A>(
    _ type: T.Type = T.self,
    tags: AnyHashable...,
    args arg1: A1 = (),
    _    args: repeat each A
  ) async throws -> T {
    try await resolve(type, tags: Set(tags), args: (arg1, repeat each args))
  }

#else

  // Asynchronously resolve the entry with 0 or 1 arguments.
  func resolve<T, A>(
    _ type: T.Type = T.self,
    tags: AnyHashable...,
    args arg1: A = ()
  ) async throws -> T {
    try await resolve(type, tags: Set(tags), args: arg1)
  }

% for a in range(2, arg_count + 1):
  /// Asynchronously resolve the entry with ${a} arguments.
  func resolve<T, ${args(range(1, a + 1), lambda i: f'A{i}')}>(
    _ type: T.Type = T.self,
    tags: AnyHashable...,
    args arg1: A1, ${args(range(2, a + 1), lambda i: f"\n    _    arg{i}: A{i}")}
  ) async throws -> T {
    let args = (${args(range(1, a + 1), lambda i: f"arg{i}")})
    return try await resolve(type, tags: Set(tags), args: args)
  }
% if a < arg_count:

% end
% end

#endif
}
