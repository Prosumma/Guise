//
//  Auto.swift
//  Guise
//
//  Created by Gregory Higley on 2022-09-21.
//
%{
arg_count = int(arg_count)

def args(items, fmt=lambda i: f'{i}', sep=', '):
  return sep.join(map(fmt, items))
}%

public typealias Resolution<T> = (any Resolver) throws -> T

public func auto<T>(
  _ initializer: @escaping () throws -> T
) -> Resolution<T> {
  return { _ in
    try initializer()
  }
}

#if swift(>=5.9)

public func auto<T, each D>(
  _ initializer: @escaping (repeat each D) throws -> T
) -> Resolution<T> {
  return { r in
    try initializer(repeat r.resolve() as (each D))
  }
}

#else

% for a in range(1, arg_count + 1):
public func auto<T, ${args(range(1, a + 1), lambda i: f'A{i}')}>(
  _ initializer: @escaping (${args(range(1, a + 1), lambda i: f'A{i}')}) throws -> T
) -> Resolution<T> {
  return { r in
    try initializer(${args(range(1, a + 1), lambda i: f"\n      r.resolve()")}
    )
  }
}
% if a < arg_count:

% end
% end

#endif
