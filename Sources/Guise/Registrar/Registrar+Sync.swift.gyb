//
//  Registrar.swift
//  Guise
//
//  Created by Gregory Higley on 2022-09-21.
//
%{
arg_count = int(arg_count)

def args(items, fmt=lambda i: f'{i}', sep=', '):
  return sep.join(map(fmt, items))
}%

public extension Registrar {
#if swift(>=5.9)
  @discardableResult
  func register<T, each A>(
    _ type: T.Type = T.self,
    tags: AnyHashable...,
    lifetime: Lifetime = .transient,
    factory: @escaping (any Resolver, repeat each A) throws -> T
  ) -> Key {
    let factory: SyncFactory<T, repeat each A> = { (r: any Resolver, arg: repeat each A) in
      try factory(r, repeat each arg)
    }
    return register(type, tags: Set(tags), lifetime: lifetime, factory: factory)
  }
#else
  @discardableResult
  func register<T>(
    _ type: T.Type = T.self,
    tags: AnyHashable...,
    lifetime: Lifetime = .transient,
    factory: @escaping (any Resolver) throws -> T
  ) -> Key {
    let factory: SyncFactory<T, Void> = { r, _ in
      try factory(r)
    }
    return register(type, tags: Set(tags), lifetime: lifetime, factory: factory)
  }

  @discardableResult
  func register<T, A>(
    _ type: T.Type = T.self,
    tags: AnyHashable...,
    lifetime: Lifetime = .transient,
    factory: @escaping SyncFactory<T, A>
  ) -> Key {
    register(type, tags: Set(tags), lifetime: lifetime, factory: factory)
  }

% for a in range(2, arg_count + 1):
  @discardableResult
  func register<T, ${args(range(1, a + 1), lambda i: f'A{i}')}>(
    _ type: T.Type = T.self,
    tags: AnyHashable...,
    lifetime: Lifetime = .transient,
    factory: @escaping (any Resolver, ${args(range(1, a + 1), lambda i: f'A{i}')}) throws -> T
  ) -> Key {
    let factory: SyncFactory<T, (${args(range(1, a + 1), lambda i: f'A{i}')})> = { r, arg in
      try factory(r, ${args(range(0, a), lambda i: f'arg.{i}')})
    }
    return register(type, tags: Set(tags), lifetime: lifetime, factory: factory)
  }
% if a < arg_count:

% end
% end
#endif
}

public extension Registrar {
  @discardableResult
  func register<T>(
    _ type: T.Type = T.self,
    tags: AnyHashable...,
    lifetime: Lifetime = .transient,
    instance: @escaping @autoclosure () -> T
  ) -> Key {
    let factory: SyncFactory<T, Void> = { _, _ in
      instance()
    }
    return register(type, tags: Set(tags), lifetime: lifetime, factory: factory)
  }
}
